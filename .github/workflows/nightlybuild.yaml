name: nightlybuild

# Triggers the workflow on push or pull request
# events but only for the master and develop branch
on:
  push:
    branches:
    - main
    - develop
  pull_request:
    branches:
    - main
    - develop

jobs:
  # The "build" workflow
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v4
    
    # Setup Go
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21.5' # The Go version to download (if necessary) and use.
        
    # Run build of the application
    - name: Run build windows
      run: cd app && GOOS=windows GOARCH=amd64 go build -o ../dist/codeshell-win64.exe main.go 
    - name: Run build linux
      run: cd app && GOOS=linux GOARCH=amd64 go build -o ../dist/codeshell-linux64 main.go 
    
    # Run testing on the code
    - name: Run testing
      run: cd app && go test -v ./...

#    - name: release
#      uses: actions/create-release@v1
#      id: create_release
#      with:
#        draft: false
#        prerelease: false
#        release_name: codeshell-latest-dev-build-${{ github.ref }}
#        tag_name: ${{ github.ref }}
#      env:
#        GITHUB_TOKEN: ${{ github.token }}
#    - name: upload windows artifact
#      uses: actions/upload-release-asset@v1
#      env:
 #       GITHUB_TOKEN: ${{ github.token }}
 #     with:
 #       upload_url: ${{ steps.create_release.outputs.upload_url }}
 #       asset_path: ./dist/codeshell-win64.exe
 #       asset_name: codeshell.windows-amd64.zip
 #       asset_content_type: application/zip
